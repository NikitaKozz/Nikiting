t = [1, 5, 2, 7, 1, 9, 3, 8, 5, 9]  # Список значений
M0 = sum(t) / len(t)  # Вычисление среднего значения
D = sum((t[x]-M0)**2 for x in t) / len(t)  # Нахождение дисперсии по формуле
print(D ** 0.5)  # Вывод квадратного корня из дисперсии - среднеквадратического отклонения

t1 = [1, 3, 5, 6, 6, 7, 9, 11]  # Список значений (1)
t2 = [5, 7, 9, 10, 10, 11, 13, 15]  # Список значений (2)
M1 = sum(t1) / len(t1)  # Вычисление среднего значения (1)
M2 = sum(t2) / len(t2)  # Вычисление среднего значения (2)
D1 = 0  # Инициализация первой дисперсии
for x in range(8):  # Цикл для суммирования значений по формуле дисперсии (1)
  D1 += (t1[x] - M1)**2
D2 = 0  # Инициализация второй дисперсии
for x in range(8):  # Цикл для суммирования значений по формуле дисперсии (2)
  D2 += (t2[x] - M2)**2
print(D1 / D2)  # Отношение дисперсий

t3 = [2, 4, 5, 8, 9, 10, 14, 16]  # Список значений (1)
t4 = [6, 12, 15, 24, 27, 30, 42, 48]  # Список значений (2)
M3 = sum(t3) / len(t3)  # Вычисление среднего значения
M4 = sum(t4) / len(t4)  # Вычисление среднего значения
D3 = 0  # Инициализация первой дисперсии
for x in range(8):  # Цикл для суммирования значений по формуле дисперсии (1)
  D3 += (t3[x] - M3)**2
D4 = 0  # Инициализация второй дисперсии
for x in range(8):  # Цикл для суммирования значений по формуле дисперсии (2)
  D4 += (t4[x] - M4)**2
print((D3**0.5)/(D4**0.5))  # Отношение квадратных корней из дисперсий - среднеквадратических отклонений

from scipy import stats  # Библиотека для работа с распределением
mean = 100 
std = 15
lowIQ = (stats.norm(mean, std).sf(70))*100  # Процент для наивысшего
highIQ = (stats.norm(mean, std).sf(112))*100  # Процент для наименьшего
dif = lowIQ - highIQ  # Разность наибольшего и наименьшего
print(f"Процент людей с IQ от 70 до 112:{dif: .2f} %")
